
from config import dataio;
import utils_common;
import pandas as pd;
import numpy as np;
import talib;

class FeaTalibOverlap1(object):
    def __init__(self):
        self.timeperiods_ = [5,10,20,50];
        pass;
    
    def extract(self):

        def DEMA(close,periods):
            return talib.DEMA(close,timeperiod=periods)/close;

        def EMA(close,periods):
            return talib.EMA(close,timeperiod=periods)/close;

        def KAMA(close,periods):
            return talib.KAMA(close,timeperiod=periods)/close;

        def MA(close,periods):
            return talib.MA(close,timeperiod=periods)/close;

        def MIDPOINT(close,periods):
            return talib.MIDPOINT(close,periods)/close;

        def SMA(close,periods):
            return talib.SMA(close,periods)/close;

        def T3(close,periods):
            return talib.T3(close,periods)/close;

        def TEMA(close,periods):
            return talib.TEMA(close,periods)/close;

        def TRIMA(close,periods):
            return talib.TRIMA(close,periods)/close;

        def WMA(close,periods):
            return talib.WMA(close,periods)/close;
        
        def process(secID,recs):
            indices = [(rec['secID'],rec['tradeDate']) for rec in recs];

            close = np.array([rec['closePrice'] for rec in recs]);
            functions = [
                DEMA,
                EMA,
                KAMA,
                MA,
                MIDPOINT,
                SMA,
                T3,
                TEMA,
                TRIMA,
                WMA
            ];

            feas = [];
            names = [];
            for period in self.timeperiods_:
                for func in functions:
                    names.append('FeaTalib_' + func.__name__ + '_' + str(period));
                    feas.append(func(close,periods=period));
                    pass;
                pass;

            fea = np.vstack(feas).T;
                        
            df = pd.DataFrame(fea,
                              index=pd.MultiIndex.from_tuples(indices,
                                                              names=['secID','tradeDate']),
                              columns=names);
            return df;

        df = dataio.getdf('MktEqudAdjAfGet')[['closePrice','isOpen']];
        df = df[df['isOpen']==1];
        
        secResults = dataio.forEachSecID(df,process);

        return pd.concat(secResults);
        pass;
