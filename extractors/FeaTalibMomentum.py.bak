
from config import dataio;
import utils_common;
import pandas as pd;
import numpy as np;
import talib;

class FeaTalibOverlap1(object):
    def __init__(self):
        self.timeperiods_ = [5,10,20,50];
        pass;
    
    def extract(self):

        def talib_ADX(data,timeperiod):
            return talib.ADX(data['highestPrice'],data['lowestPrice'],data['closePrice'],timeperiod=timeperiod);

        def talib_ADXR(data,timeperiod):
            return talib.ADXR(data['highestPrice'],data['lowestPrice'],data['closePrice'],timeperiod=timeperiod);


        def talib_APO(data):
            return talib.APO(data['closePrice']);

        def talib_AROON(data,timeperiod):
            aroondown, aroonup = talib.AROON(data['highestPrice'],
                                             data['lowestPrice'],
                                             timeperiod=timeperiod);
            return {'AROON_DOWN':aroondown,'AROON_UP':aroonup};

        def talib_AROONOSC(data,timeperiod):
            return talib.AROONOSC(data['highestPrice'],
                                  data['lowestPrice'],
                                  timeperiod=timeperiod);

        def talib_BOP(data):
            return talib.BOP(data['openPrice'],
                             data['highestPrice'],
                             data['lowestPrice'],
                             data['closePrice']);

        def talib_CCI(data,timeperiod):
            return talib.CCI(data['highestPrice'],data['lowestPrice'],
                             data['closePrice'],timeperiod=timeperiod);

        def talib_CMO(data,timeperiod):
            return talib.CMO(data['closePrice'],timeperiod=timeperiod);

        def talib_DX(data,timeperiod):
            return talib.DX(data['highestPrice'],data['lowestPrice'],
                            data['closePrice'],timeperiod=timeperiod);

        def talib_MACD(data,timeperiod):
            macd, macdsignal, macdhist =talib.MACD(data['closePrice'],
                                                   signalperiod=timeperiod);

            return {'MACD':macd,'MACDSIGNAL':macdsignal,
                    'MACDHIST':macdhist};

        def talib_MACDEXT(data,timeperiod):
            macd, macdsignal, macdhist = talib.MACDEXT(data['closePrice'],
                                                       signalperiod=timeperiod);

            return {'MACDEXT':macd,
                    'MACDEXTSIGNAL':macdsignal,
                    'MACDEXTHIST':macdhist};

        def talib_MACDFIX(data,timeperiod):
            macd, macdsignal, macdhist = MACDFIX(data['closePrice'],
                                                 signalperiod=timeperiod);
            return {'MACDFIX':macd,
                    'MACDFIXSIGNAL':macdsignal,
                    'MACDFIXHIST':macdhist
                    };

        def talib_MFI(data,timeperiod):
            return talib.MFI(data['highestPrice'],
                             data['lowestPrice'],
                             data['closePrice'],
                             data['turnoverVol'],
                             timeperiod=timeperiod);
        
        def talib_MINUS_DI(data,timeperiod):
            return talib.MINUS_DI(data['highestPrice'], data['lowestPrice'],
                                  data['closePrice'],
                                  timeperiod=timeperiod);

        def talib_MINUS_DM(data,timeperiod):
            return talib.MINUS_DM(data['highestPrice'],
                                  data['lowestPrice'],
                                  timeperiod=timeperiod);

        def talib_MOM(data,timeperiod):
            return talib.MOM(data['closePrice'], timeperiod=timeperiod);

        def talib_PLUS_DI(data,timeperiod):
            return talib.PLUS_DI(data['highestPrice'], data['lowestPrice'],
                                 data['closePrice'],
                                 timeperiod=timeperiod);
        
        def talib_PLUS_DM(data,timeperiod):
            return talib.PLUS_DM(data['highestPrice'], data['lowestPrice'],
                                 timeperiod=timeperiod);

        def talib_PPO(data):
            return talib.PPO(data['closePrice']);

        def talib_ROC(data,timeperiod):
            return talib.ROC(data['closePrice']

        def KAMA(close,period):
            return talib.KAMA(close,timeperiod=periods)/close;

        def MA(close,periods):
            return talib.MA(close,timeperiod=periods)/close;

        def MIDPOINT(close,periods):
            return talib.MIDPOINT(close,periods)/close;

        def SMA(close,periods):
            return talib.SMA(close,periods)/close;

        def T3(close,periods):
            return talib.T3(close,periods)/close;

        def TEMA(close,periods):
            return talib.TEMA(close,periods)/close;

        def TRIMA(close,periods):
            return talib.TRIMA(close,periods)/close;

        def WMA(close,periods):
            return talib.WMA(close,periods)/close;
        
        def process(secID,recs):
            indices = [(rec['secID'],rec['tradeDate']) for rec in recs];

            close = np.array([rec['closePrice'] for rec in recs]);
            functions = [
                DEMA,
                EMA,
                KAMA,
                MA,
                MIDPOINT,
                SMA,
                T3,
                TEMA,
                TRIMA,
                WMA
            ];

            feas = [];
            names = [];
            for period in self.timeperiods_:
                for func in functions:
                    names.append('FeaTalib_' + func.__name__ + '_' + str(period));
                    feas.append(func(close,periods=period));
                    pass;
                pass;

            fea = np.vstack(feas).T;
                        
            df = pd.DataFrame(fea,
                              index=pd.MultiIndex.from_tuples(indices,
                                                              names=['secID','tradeDate']),
                              columns=names);
            return df;

        df = dataio.getdf('MktEqudAdjAfGet')[['closePrice','isOpen']];
        df = df[df['isOpen']==1];
        
        secResults = dataio.forEachSecID(df,process);

        return pd.concat(secResults);
        pass;
