
from config import dataio;
import utils_common;
import pandas as pd;
import numpy as np;
import talib;

class FeaTalib(object):
    def __init__(self):
        self.timeperiods_ = [5,10,20,50];
        self.periodNames_ = ['timeperiod','signalperiod'];
        self.nameMap_ = {
            'openPrice': 'open',
            'closePrice': 'close',
            'highestPrice': 'high',
            'lowestPrice': 'low',
            'turnoverRate': 'volume'
        };

        self.exceptList_ = {'MAVP','EXP','SINH','COSH','MULT'};
        pass;
    
    def extract(self):
        def runFunction(func,data,namePrefix):
            result = func.run(data);

            names = [];
            results = [];
            if len(func.output_names)==1:
                names.append(namePrefix);
                results.append(result);
            else:
                for i,outname in enumerate(func.output_names):
                    results.append(result[i]);
                    names.append(namePrefix + '_' + func.output_names[i]);
                    pass;
                pass;

            hasVolume = False;

            for nameKey,nameVal in func.input_names.items():
                if type(nameVal)=='list':
                    for nv in nameVal:
                        if nv == 'volume':
                            hasVolume = True;
                            pass;
                        pass;
                    pass;
                elif nameVal=='volume':
                    hasVolume = True;
                    pass;
                
            if not hasVolume:
                for i in range(len(results)):
                    if not np.issubdtype(results[i].dtype, np.integer):
                        results[i] /= data['close'];
                        pass;
                    pass;
                pass;
            
            return names,results;
            pass;
        
        def process(secID,recs):

            data = utils_common.records2dict(recs);
            data['periods'] = np.array(self.timeperiods_,dtype=np.float64);
            for oldKey,newKey in self.nameMap_.items():
                data[newKey] = data.pop(oldKey);
                pass;
            
            funcNames = talib.get_functions();            
            indices = [(rec['secID'],rec['tradeDate']) for rec in recs];

            feas = [];
            names = [];
            for funcName in funcNames:
                if funcName in self.exceptList_:
                    continue;
                func = talib.abstract.Function(funcName);
                param = func.parameters;
                periodName = None;
                for pn in self.periodNames_:
                    if pn in param:
                        periodName = pn;
                        pass;
                    pass;

                if periodName is not None:
                    for p in self.timeperiods_:
                        param[periodName] = p;
                        func.parameters = param;
                        rnames,results = runFunction(func,data,'FeaTalib_'+funcName + '_' + str(p));
                        names += rnames;
                        feas += results;
                        pass;
                    pass;
                else:
                    rnames,results = runFunction(func,data,'FeaTalib_'+funcName);
                    names += rnames;
                    feas += results;
                    pass;
                pass;

            fea = np.vstack(feas).T;
                        
            df = pd.DataFrame(fea,
                              index=pd.MultiIndex.from_tuples(indices,
                                                              names=['secID','tradeDate']),
                              columns=names);
            return df;

        df = dataio.getdf('MktEqudAdjAfGet')[['openPrice','highestPrice',
                                              'lowestPrice','closePrice','turnoverRate',
                                              'isOpen']];
        df = df[df['isOpen']==1];
        
        secResults = dataio.forEachSecID(df,process);

        return pd.concat(secResults);
        pass;
